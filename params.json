{
  "name": "Easydeviceinfo",
  "tagline": "Android library to get device information in a super easy way.",
  "body": "### Specs\r\n[![API](https://img.shields.io/badge/API-9%2B-orange.svg?style=flat)](https://android-arsenal.com/api?level=9) <a href=\"http://www.methodscount.com/?lib=com.github.nisrulz%3Aeasydeviceinfo%3A2.1.1\"><img src=\"https://img.shields.io/badge/Size-30 KB-e91e63.svg\"/></a>\r\n\r\n### Featured in\r\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-EasyDeviceInfo-green.svg?style=true)](https://android-arsenal.com/details/1/3562) [![Android Weekly](https://img.shields.io/badge/Android%20Weekly-%23209-blue.svg)](http://androidweekly.net/issues/issue-209) [![AndroidDev Digest](https://img.shields.io/badge/AndroidDev%20Digest-%2399-blue.svg)](https://www.androiddevdigest.com/digest-99/) [![awesome-android](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://snowdream.github.io/awesome-android/Other.html#Utility)\r\n\r\n### Show some :heart:\r\n[![GitHub stars](https://img.shields.io/github/stars/nisrulz/easydeviceinfo.svg?style=social&label=Star)](https://github.com/nisrulz/easydeviceinfo) [![GitHub forks](https://img.shields.io/github/forks/nisrulz/easydeviceinfo.svg?style=social&label=Fork)](https://github.com/nisrulz/easydeviceinfo/fork) [![GitHub watchers](https://img.shields.io/github/watchers/nisrulz/easydeviceinfo.svg?style=social&label=Watch)](https://github.com/nisrulz/easydeviceinfo) [![GitHub followers](https://img.shields.io/github/followers/nisrulz.svg?style=social&label=Follow)](https://github.com/nisrulz/easydeviceinfo)  \r\n[![Twitter Follow](https://img.shields.io/twitter/follow/nisrulz.svg?style=social)](https://twitter.com/nisrulz) \r\n\r\n\r\nAndroid library to get device information in a super easy way.\r\n\r\nThe library is built for simplicity and approachability. It not only eliminates most boilerplate code for dealing with device information, but also provides an easy and simple API to retrieve them.\r\n\r\nDemo App\r\n\r\n[![playstore](https://github.com/nisrulz/easydeviceinfo/raw/master/img/google-play-store.png)](https://play.google.com/store/apps/details?id=in.excogitation.deviceinfo)\r\n# Changelog\r\n\r\nStarting with `1.1.8`, Changes exist in the [releases tab](https://github.com/nisrulz/easydeviceinfo/releases).\r\n\r\n# Including in your project\r\nEasyDeviceInfo is available in the Jcenter, so getting it as simple as adding it as a dependency, where `{latest version}` corresponds to published version in Jcenter\r\n\r\n+ EasyDeviceInfo [ ![Download](https://api.bintray.com/packages/nisrulz/maven/com.github.nisrulz%3Aeasydeviceinfo/images/download.svg) ](https://bintray.com/nisrulz/maven/com.github.nisrulz%3Aeasydeviceinfo/_latestVersion)\r\n```gradle\r\ncompile 'com.github.nisrulz:easydeviceinfo:{latest version}'\r\n```\r\n\r\n+\tEasyDeviceInfo-Ads   [ ![Jcenter](https://api.bintray.com/packages/nisrulz/maven/easydeviceinfo-ads/images/download.svg) ](https://bintray.com/nisrulz/maven/easydeviceinfo-ads/_latestVersion)\r\n```gradle\r\ncompile 'com.github.nisrulz:easydeviceinfo-ads:{latest version}'\r\n```\r\n\r\n+\tEasyDeviceInfo-Base   [ ![Jcenter](https://api.bintray.com/packages/nisrulz/maven/easydeviceinfo-base/images/download.svg) ](https://bintray.com/nisrulz/maven/easydeviceinfo-base/_latestVersion)\r\n```gradle\r\ncompile 'com.github.nisrulz:easydeviceinfo-base:{latest version}'\r\n```\r\n\r\n\r\nThe Mods are available through different library as below\r\n+  `easydeviceinfo`\r\n    - Main library which transitively includes both `easydeviceinfo-ads` and `easydeviceinfo-base`.\r\n\r\n+ `easydeviceinfo-ads`\r\n    -  EasyDeviceInfo Ads, which facilitates information regarding ads. Has a dependency on `google-play-services-ads`.\r\n    -  **Supported Mods**\r\n       + [EasyAdsMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easyadsmod)\r\n+ `easydeviceinfo-base`\r\n    -  EasyDeviceInfo Base, which facilitates information regarding the device.\r\n    -  **Supported Mods**\r\n      + [EasyAppMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easyappmod)\r\n      + [EasyBatteryMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easybatterymod)\r\n      + [EasyBluetoothMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easybluetoothmod)\r\n      + [EasyConfigMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easyconfigmod)\r\n      + [EasyCpuMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easycpumod)\r\n      + [EasyDeviceMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easydevicemod)\r\n      + [EasyDisplayMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easydisplaymod)\r\n      + [EasyIdMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easyidmod)\r\n      + [EasyLocationMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easylocationmod)\r\n      + [EasyMemoryMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easymemorymod)\r\n      + [EasyNetworkMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easynetworkmod)\r\n      + [EasyNfcMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easynfcmod)\r\n      + [EasySimMod](https://github.com/nisrulz/easydeviceinfo/wiki/Usage#easysimmod)\r\n\r\nNow, Create an instance of one of the Mods ( **Easy\\*Mod** class ), i.e `EasyConfigMod`\r\n```java\r\nEasyConfigMod easyConfigMod = new EasyConfigMod(context);\r\n```\r\nNext call an available function on the ***easyConfigMod*** instance such as\r\n```java\r\nString time_in_ms= String.valueOf(easyConfigMod.getTime());\r\n```\r\n\r\nNow each **Mods** has a certain set of functions you can call on them to retrieve device information.\r\n\r\nThe list is as follows\r\n\r\n#### **EasyAdsMod** \r\nTo get Advertiser's ID\r\n\r\n```java\r\n//Get Android Advertiser ID\r\neasyIdMod.getAndroidAdId(MainActivity.this, new EasyIdMod.AdIdentifierCallback() {\r\n    @Override\r\n    public void onSuccess(String adIdentifier, boolean adDonotTrack) {\r\n        // Do something with the advertiser's ID\r\n    }\r\n});\r\n```\r\n\r\n#### **EasyIdMod** \r\n```java\r\nEasyIdMod easyIdMod = new EasyIdMod(context);\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|PseudoID|`getPseudoUniqueID()`|String\r\n|Android ID|`getAndroidID()`|String\r\n\r\nMore Functions\r\n\r\n+ To get User-Agent, call it from the UI thread **ONLY**\r\n\r\n  ```java\r\n    String ua = easyDeviceMod.getUA()\r\n  ```\r\n  \r\n+ To get GSF ID\r\n  ```java\r\n  String gsf_id = getGSFID();\r\n  ```\r\n\r\n  + Include the required permission in your AndroidManifest.xml\r\n\r\n  ```xml\r\n  <uses-permission android:name=\"com.google.android.providers.gsf.permission.READ_GSERVICES\"/>\r\n  ```\r\n\r\n+ To get Email IDs\r\n  ```java\r\n  //Get Google Email ID\r\n  String[] emailIds = easyIdMod.getAccounts();\r\n    StringBuilder emailString = new StringBuilder();\r\n    if (emailIds != null && emailIds.length > 0) {\r\n      for (String e : emailIds) {\r\n        emailString.append(e).append(\"\\n\");\r\n      }\r\n    } else {\r\n      emailString.append(\"-\");\r\n    }\r\n\r\n  String emailId=emailString.toString();\r\n  ```\r\n  + Include the required permission in your AndroidManifest.xml\r\n\r\n  ```xml\r\n  <uses-permission android:name=\"android.permission.GET_ACCOUNTS\"/>\r\n  ```\r\n\r\n#### **EasyConfigMod**\r\n```java\r\nEasyConfigMod easyConfigMod = new EasyConfigMod(context);\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|Is running on emulator|`isRunningOnEmulator()`|boolean\r\n|Time (ms)|`getTime()`|long\r\n|Formatted Time (24Hr)|`getFormattedTime()`|String\r\n|Up Time (ms)|`getUpTime()`|long\r\n|Formatted Up Time (24Hr)|`getFormattedUpTime()`|String\r\n|Get Current Date|`getCurrentDate()`|Date\r\n|Get Formatted Date|`getFormattedDate()`|String\r\n|Has SD Card|`hasSdCard()`|boolean\r\n\r\nFunctions which return multiple results\r\n\r\n+ Device Ringer Mode\r\n  ```java\r\n  int ringer_mode =easyConfigMod.getDeviceRingerMode();\r\n  ```\r\n  \r\n Then match it against the constants provided\r\n  \r\n  ```java\r\n switch (ringer_mode) {\r\n      case EasyConfigMod.RINGER_MODE_NORMAL:\r\n        System.out.println(\"Ringer mode : Normal\");\r\n        break;\r\n      case EasyConfigMod.RINGER_MODE_VIBRATE:\r\n        System.out.println(\"Ringer mode : Vibrate\");\r\n        break;\r\n      case EasyConfigMod.RINGER_MODE_SILENT:\r\n        System.out.println(\"Ringer mode : Silent\");\r\n        break;\r\n      default:\r\n        //do nothing\r\n        break;\r\n    }\r\n  ```\r\n  \r\n  where constants available are \r\n    + `EasyConfigMod.RINGER_MODE_NORMAL`\r\n    + `EasyConfigMod.RINGER_MODE_VIBRATE`\r\n    + `EasyConfigMod.RINGER_MODE_SILENT`\r\n\r\n#### **EasyNetworkMod** \r\n\r\n```java\r\nEasyNetworkMod easyNetworkMod = new EasyNetworkMod(context);\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|WiFi State|`isNetworkAvailable()`|boolean\r\n|WiFi State|`isWifiEnabled()`|boolean\r\n|IPv4 Address|`getIPv4Address()`|String\r\n|IPv6 Address|`getIPv6Address()`|String\r\n\r\n\r\n+ To get WiFi MAC Address\r\n  ```java\r\n  String wifi_mac = easyNetworkMod.getWifiMAC();\r\n  ```\r\n\r\n  + Include the required permission in your AndroidManifest.xml\r\n\r\n  ```xml\r\n  <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\r\n  ```\r\n\r\nFunctions which return multiple results\r\n\r\n+ To get network type\r\n  ```java\r\n  int network_type =easyNetworkMod.getNetworkType();\r\n  ```\r\n  \r\n  Then match it against the constants provided\r\n  \r\n  ```java\r\nswitch () {\r\n      case EasyNetworkMod.CELLULAR_UNKNOWN:\r\n        System.out.println(\"Network Type : Unknown\");\r\n        break;\r\n      case EasyNetworkMod.CELLULAR_UNIDENTIFIED_GEN:\r\n        System.out.println(\"Network Type : Cellular Unidentified Generation\");\r\n        break;\r\n      case EasyNetworkMod.CELLULAR_2G:\r\n        System.out.println(\"Network Type : Cellular 2G\");\r\n        break;\r\n      case EasyNetworkMod.CELLULAR_3G:\r\n        System.out.println(\"Network Type : Cellular 3G\");\r\n        break;\r\n      case EasyNetworkMod.CELLULAR_4G:\r\n        System.out.println(\"Network Type : Cellular 4G\");\r\n        break;\r\n      case EasyNetworkMod.WIFI_WIFIMAX:\r\n        System.out.println(\"Network Type : WIFI\");\r\n        break;\r\n      default:\r\n        // Do nothing\r\n        break;\r\n    }\r\n  ```\r\n  \r\n  where constants available are \r\n    + `EasyNetworkMod.CELLULAR_UNKNOWN`\r\n    + `EasyNetworkMod.CELLULAR_UNIDENTIFIED_GEN`\r\n    + `EasyNetworkMod.CELLULAR_2G`\r\n    + `EasyNetworkMod.CELLULAR_3G`\r\n    + `EasyNetworkMod.CELLULAR_4G`\r\n    + `EasyNetworkMod.WIFI_WIFIMAX`\r\n\r\n+ Include the required permission in your AndroidManifest.xml\r\n   ```xml\r\n  <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\r\n  <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n  ```\r\n\r\n#### **EasyMemoryMod** \r\n```java\r\nEasyMemoryMod easyMemoryMod = new EasyMemoryMod(context);\r\n```\r\n|Value|functionName|returns(bytes)\r\n|---|---|---|\r\n|Total RAM|`getTotalRAM()`|long\r\n|Available Internal Memory|`getAvailableInternalMemorySize()`|long\r\n|Available External Memory|`getAvailableExternalMemorySize()`|long\r\n|Total Internal Memory|`getTotalInternalMemorySize()`|long\r\n|Total External Memory|`getTotalExternalMemorySize()`|long\r\n\r\nUtil functions for conversions\r\n\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|Convert to Kb|`convertToKb(long valInBytes)`|float\r\n|Convert to Mb|`convertToMb(long valInBytes)`|float\r\n|Convert to Gb|`convertToGb(long valInBytes)`|float\r\n|Convert to Tb|`convertToTb(long valInBytes)`|float\r\n\r\n#### **EasyAppMod** \r\n```java\r\nEasyAppMod easyAppMod = new EasyAppMod(context);\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|Activity Name|`getActivityName()`|String\r\n|Package Name|`getPackageName()`|String\r\n|AppStore|`getStore()`|String\r\n|App Name|`getAppName()`|String\r\n|App Version|`getAppVersion()`|String\r\n|App Version Code|`getAppVersionCode()`|String\r\n|Is App with Packagename Installed|`isAppInstalled(String packageName)`|boolean\r\n|Is Permission Granted|`isPermissionGranted(String permission)`|boolean\r\n\r\n\r\n\r\n#### **EasyBatteryMod** \r\n```java\r\nEasyBatteryMod easyBatteryMod = new EasyBatteryMod(context);\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|Battery Percentage (%)|`getBatteryPercentage()`|int\r\n|Is Device Charging|`isDeviceCharging()`|boolean\r\n|Technology used by battery|`getBatteryTechnology()`|String\r\n|Temperature (Deg Celsius)|`getBatteryTemperature()`|float\r\n|Voltage (mV)|`getBatteryVoltage()`|int\r\n|Is battery present|`isBatteryPresent()`|boolean\r\n\r\nFunctions which return multiple results\r\n\r\n+ Battery Health\r\n  ```java\r\n  int battery_health =easyBatteryMod.getBatteryHealth();\r\n  ```\r\n  \r\n Then match it against the constants provided\r\n  \r\n  ```java\r\n switch (battery_health) {\r\n      case EasyBatteryMod.HEALTH_GOOD:\r\n        System.out.println(\"Battery health : Good\");\r\n        break;\r\n      case EasyBatteryMod.HEALTH_HAVING_ISSUES:\r\n        System.out.println(\"Battery health : Having issues\");\r\n        break;\r\n      default:\r\n        System.out.println(\"Battery health : Having issues\");\r\n        break;\r\n    }\r\n  ```\r\n  \r\n  where constants available are \r\n    + `EasyBatteryMod.HEALTH_GOOD`\r\n    + `EasyBatteryMod.HEALTH_HAVING_ISSUES`\r\n \r\n+ Charging Source\r\n  ```java\r\n  int charging_source =easyBatteryMod.getChargingSource();\r\n  ```\r\n  \r\n Then match it against the constants provided\r\n  \r\n  ```java\r\n  switch (charging_source) {\r\n      case EasyBatteryMod.CHARGING_VIA_AC:\r\n        System.out.println(\"Device charging via AC\");\r\n        break;\r\n      case EasyBatteryMod.CHARGING_VIA_USB:\r\n        System.out.println(\"Device charging via USB\");\r\n        break;\r\n      case EasyBatteryMod.CHARGING_VIA_WIRELESS:\r\n        System.out.println(\"Device charging via Wireless\");\r\n        break;\r\n      case EasyBatteryMod.CHARGING_VIA_UNKNOWN_SOURCE:\r\n        System.out.println(\"Device charging via Unknown Source\");\r\n        break;\r\n      default:\r\n        System.out.println(\"Device charging via Unknown Source\");\r\n        break;\r\n    }\r\n  ```\r\n  \r\n  where constants available are \r\n    + `EasyBatteryMod.CHARGING_VIA_AC:`\r\n    + `EasyBatteryMod.CHARGING_VIA_USB`\r\n    + `EasyBatteryMod.CHARGING_VIA_WIRELESS`\r\n    + `EasyBatteryMod.CHARGING_VIA_UNKNOWN_SOURCE`\r\n\r\n\r\n\r\n#### **EasyBluetoothMod** \r\n```java\r\nEasyBluetoothMod easyBluetoothMod = new EasyBluetoothMod(context);\r\n```\r\n+ To get Bluetooth MAC Address\r\n  ```java\r\n \r\n  String bluetooth_mac = easyBluetoothMod.getBluetoothMAC();\r\n  ```\r\n\r\n  + Include the required permission in your AndroidManifest.xml\r\n\r\n  ```xml\r\n  <uses-permission android:name=\"android.permission.BLUETOOTH\"/>\r\n  ```\r\n\r\n#### **EasyCpuMod** \r\n```java\r\n EasyCpuMod easyCpuMod = new EasyCpuMod();\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|Supported ABIS|`getStringSupportedABIS()`|String\r\n|Supported 32 bit ABIS|`getStringSupported32bitABIS()`|String\r\n|Supported 64 bit ABIS|`getStringSupported64bitABIS()`|String\r\n\r\nFunctions which return multiple results\r\n\r\n+ To get Supported ABIS\r\n```java\r\nStringBuilder supportABI = new StringBuilder();\r\n   for (String abis : easyCpuMod.getSupportedABIS()) {\r\n       supportABI.append(abis).append(\"\\n\");\r\n   }\r\n\r\nString supportedABI=supportABI.toString();\r\n```\r\n\r\n+ To get Supported 32 Bit ABIS\r\n```java\r\nStringBuilder support32ABI = new StringBuilder();\r\n   for (String abis : easyCpuMod.getSupported32bitABIS()) {\r\n       support32ABI.append(abis).append(\"\\n\");\r\n   }\r\n\r\nString supported32ABI=support32ABI.toString();\r\n```\r\n\r\n+ To get Supported 64 Bit ABIS\r\n```java\r\nStringBuilder support64ABI = new StringBuilder();\r\n   for (String abis : easyCpuMod.getSupported64bitABIS()) {\r\n       support64ABI.append(abis).append(\"\\n\");\r\n   }\r\n\r\nString supported64ABI=support64ABI.toString();\r\n```\r\n\r\n\r\n#### **EasyDeviceMod** \r\n```java\r\n EasyDeviceMod easyDeviceMod = new EasyDeviceMod(context);\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|IMEI|`getIMEI()`|String\r\n|Screen Display ID|`getScreenDisplayID()`|String\r\n|Build Version Codename|`getBuildVersionCodename()`|String\r\n|Build Version Incremental|`getBuildVersionIncremental()`|String\r\n|Build Version SDK|`getBuildVersionSDK()`|int\r\n|Build ID|`getBuildID()`|String\r\n|Manufacturer|`getManufacturer()`|String\r\n|Model|`getModel()`|String\r\n|OS Codename|`getOSCodename()`|String\r\n|OS Version|`getOSVersion()`|String\r\n|Phone Number|`getPhoneNo()`|String\r\n|Radio Hardware Version|`getRadioVer()`|String\r\n|Product|`getProduct()`|String\r\n|Device|`getDevice()`|String\r\n|Board|`getBoard()`|String\r\n|Hardware|`getHardware()`|String\r\n|Bootloader|`getBootloader()`|String\r\n|Fingerprint|`getFingerprint()`|String\r\n|Is Device rooted|`isDeviceRooted()`|boolean\r\n|Build Brand|`getBuildBrand()`|String\r\n|Build Host|`getBuildHost()`|String\r\n|Build Tags|`getBuildTags()`|String\r\n|Build Time|`getBuildTime()`|long\r\n|Build User|`getBuildUser()`|String\r\n|Build Version Release|`getBuildVersionRelease()`|String\r\n\r\nFunctions which return multiple results\r\n\r\n+ To get device type\r\n  ```java\r\n  int device_type = easyDeviceMod.getDeviceType(activity);\r\n  ```\r\n  \r\n  Then match it against the constants provided\r\n  \r\n  ```java\r\n  switch (device_type) {\r\n     case EasyDeviceMod.DEVICE_TYPE_WATCH:\r\n       System.out.println(\"watch\");\r\n       break;\r\n     case EasyDeviceMod.DEVICE_TYPE_PHONE:\r\n       System.out.println(\"phone\");\r\n       break;\r\n     case EasyDeviceMod.DEVICE_TYPE_PHABLET:\r\n       System.out.println(\"phablet\");\r\n       break;\r\n     case EasyDeviceMod.DEVICE_TYPE_TABLET:\r\n       System.out.println(\"tablet\");\r\n       break;\r\n     case EasyDeviceMod.DEVICE_TYPE_TV:\r\n       System.out.println(\"tv\");\r\n       break;\r\n   }\r\n  ```\r\n  \r\n  where constants available are \r\n    + `EasyDeviceMod.DEVICE_TYPE_WATCH`\r\n    + `EasyDeviceMod.DEVICE_TYPE_PHONE`\r\n    + `EasyDeviceMod.DEVICE_TYPE_PHABLET`\r\n    + `EasyDeviceMod.DEVICE_TYPE_TABLET`\r\n    + `EasyDeviceMod.DEVICE_TYPE_TV`\r\n\r\n+ To get phone type\r\n  ```java\r\n  int phone_type = easyDeviceMod.getPhoneType();\r\n  ```\r\n  \r\n  Then match it against the constants provided\r\n  \r\n  ```java\r\n  switch (phone_type) {\r\n      case EasyDeviceMod.PHONE_TYPE_CDMA:\r\n        System.out.println(\"Phone Type : CDMA\");\r\n        break;\r\n      case EasyDeviceMod.PHONE_TYPE_GSM:\r\n        System.out.println(\"Phone Type : GSM\");\r\n        break;\r\n      case EasyDeviceMod.PHONE_TYPE_NONE:\r\n        System.out.println(\"Phone Type : None\");\r\n        break;\r\n      default:\r\n        System.out.println(\"Phone Type : Unknown\");\r\n        break;\r\n    }\r\n  ```\r\n  \r\n  where constants available are \r\n    + `EasyDeviceMod.PHONE_TYPE_CDMA`\r\n    + `EasyDeviceMod.PHONE_TYPE_GSM`\r\n    + `EasyDeviceMod.PHONE_TYPE_NONE`\r\n\r\n+ To get device orientation\r\n  ```java\r\n  int device_orientation = easyDeviceMod.getOrientation(activity)\r\n  ```\r\n  \r\n  Then match it against the constants provided\r\n  \r\n  ```java\r\n switch (device_orientation) {\r\n      case EasyDeviceMod.ORIENTATION_LANDSCAPE:\r\n        System.out.println(\"Orientation : Landscape\");\r\n        break;\r\n      case EasyDeviceMod.ORIENTATION_PORTRAIT:\r\n       System.out.println(\"Orientation : Portrait\");\r\n        break;\r\n      case EasyDeviceMod.ORIENTATION_UNKNOWN:\r\n       System.out.println(\"Orientation : Unknown\");\r\n        break;\r\n      default:\r\n        System.out.println(\"Orientation : Unknown\");\r\n        break;\r\n    }\r\n  ```\r\n  \r\n  where constants available are \r\n    + `EasyDeviceMod.ORIENTATION_LANDSCAPE`\r\n    + `EasyDeviceMod.ORIENTATION_PORTRAIT`\r\n    + `EasyDeviceMod.ORIENTATION_UNKNOWN`\r\n    \r\n#### **EasyDisplayMod** \r\n```java\r\n EasyDisplayMod easyDisplayMod = new EasyDisplayMod(context);\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|Display Resolution|`getResolution()`|String\r\n|Screen Density|`getDensity()`|String\r\n|Display XY Coordinate|`getDisplayXYCoordinates(motionevent)`|int[]\r\n\r\n#### **EasySimMod** \r\n```java\r\nEasySimMod easySimMod = new EasySimMod(context);\r\n```\r\n\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|IMSI|`getIMSI()`|String\r\n|SIM Serial Number|`getSIMSerial()`|String\r\n|Country|`getCountry()`|String\r\n|Carrier|`getCarrier()`|String\r\n|SIM Locked|`isSimNetworkLocked()`|boolean\r\n\r\n\r\n\r\n\r\n#### **EasyLocationMod** \r\n```java\r\n EasyLocationMod easyLocationMod = new EasyLocationMod(context);\r\n```\r\n+ To get Latitude-Longitude (Geo)\r\n  ```java\r\n  //Get Lat-Long\r\n  double[] l = easyLocationMod.getLatLong();\r\n  String lat = String.valueOf(l[0]);\r\n  String lon = String.valueOf(l[1]);\r\n  ```\r\n  + Include the one of the required permission in your AndroidManifest.xml\r\n\r\n  ```xml\r\n  <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\r\n  ```\r\n  Or\r\n  ```xml\r\n  <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\r\n  ```\r\n\r\n\r\n#### **EasyNfcMod** \r\n```java\r\nEasyNfcMod easyNfcMod = new EasyNfcMod(context);\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|Is NFC present|`isNfcPresent()`|boolean\r\n|Is NFC enabled|`isNfcEnabled()`|boolean\r\n\r\n\r\n#### **EasyDeviceInfo** \r\n```java\r\nEasyDeviceInfo easyDeviceInfo = new EasyDeviceInfo();\r\n```\r\n|Value|functionName|returns\r\n|---|---|---|\r\n|Library version|`getLibraryVersion()`|String\r\n\r\nTo modify the value that is returned when a function cannot get the value from device, simply init `EasyDeviceInfo` with the new value before using any **Easy\\*Mod**\r\n```java\r\nEasyDeviceInfo easyDeviceInfo = new EasyDeviceInfo(\"na\");\r\n```\r\nthis will make the functions return `na` when the value is not found or an error is encountered.\r\n\r\nBy default if you don't use this, the value returned is `unknown`.\r\n\r\nLicense\r\n=======\r\n\r\n    Copyright 2016 Nishant Srivastava\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}